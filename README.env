Connection Strings
[
  {
    "name": "CatalogConnection",
    "value": "Server=tcp:eshoponsqlserver.database.windows.net,1433;Initial Catalog=CatalogDb;Persist Security Info=False;User ID=eshopadmin;Password='!eshop;123@';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;",
    "type": "SQLServer",
    "slotSetting": false
  },
  {
    "name": "IdentityConnection",
    "value": "Server=tcp:eshoponsqlserver.database.windows.net,1433;Initial Catalog=CatalogDb;Persist Security Info=False;User ID=eshopadmin;Password='!eshop;123@';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;",
    "type": "SQLServer",
    "slotSetting": false
  }
]

AzureSQL database:
    eshopadmin
    !eshop;123@


App Settings (only on Web Apps)
[
  {
    "name": "ASPNETCORE_ENVIRONMENT",
    "value": "Development",
    "slotSetting": true
  }
]






CosmosDB:
    eshopcosmosdb

// Add 'CosmosDBConnection' connection string to the Application Settings of 'deliveryorderprocessor' Azure Function in Azure Portal.



ACR

$ az acr build --registry eshopweb --image eshopweb.azurecr.io/eshoppublicapi --file src/PublicApi/Dockerfile .
$ az acr build --registry eshopweb --image eshopweb.azurecr.io/eshopweb --file src/Web/Dockerfile .






Container Apps or Web App (Container) or Docker local run

Error: Invalid URI. The URI is empty: src/Web/Program.cs:line 32

Attention!!!
    Set ASPNETCORE_ENVIRONMENT=Docker and 
    Specify -p :8080 target port!

In Dockerfiles of Web or PublicApi, no need to set env 'ASPNETCORE_ENVIRONMENT=Docker', it all happens during runtime.
During runtime, the ASPNETCORE_ENVIRONMENT needs to be set 'Docker' !!!
    $ docker build -t eshopweb.azurecr.io/eshopweb:latest -f src/Web/Dockerfile .
    $ docker run -d --rm -p 5106:8080 -e ASPNETCORE_ENVIRONMENT=Docker -e ASPNETCORE_URLS=http://+:8080 --name eshopshit1 eshopweb.azurecr.io/eshopweb



For Container Apps:
To create a Container App:
    $ az containerapp create --name eshopweb --resource-group rg-centralus-road-dev --environment eshop --image eshopweb.azurecr.io/eshopweb:latest --target-port 8080 --ingress external --env-vars ASPNETCORE_ENVIRONMENT=Docker ASPNETCORE_URLS=http://+:8080
because cannot specify port in Azure Portal, so doing here.



Azure Web App (Container)
For Web App (Container):
    https://learn.microsoft.com/en-us/answers/questions/880541/azure-web-app-deployment-with-port-binding
    
    The web app container enables port 8000 by default. 
    
    To change the port binding, you can use the WEBSITES_PORT=8080 app setting.



For Admin page, change here:
    src/BlazorAdmin/appsettings.Docker.json
      "apiBase": "https://eshoppublicproject.azurewebsites.net/api/",         Note: http(s)  <--    Otherwise -> CORS error: mixed content trying to access http while the host is https://eshopweb.azurewebsites.net



CORS error
In PublicApi Web App, CORS setting, add:
  "apiBase": "https://eshoppublicproject.azurewebsites.net/api/",
















Not used anymore as a solution after finding the root cause, but for the reference:

Docker Compose (preview)


services:
  eshopwebmvc:
    image: eshopweb.azurecr.io/eshopweb
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "5106:8080"





services:
  eshoppublicapi:
    image: eshopweb.azurecr.io/eshoppublicapi
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "5200:8080"

